#!/bin/bash
#
# scan networks and send ip, mac, interface manufacturer & possible hostname for units found
#
# Usage (run as root), arguments for each scan are quoted:
# netscan "scan1" "scan2" ...
# values for each scan are surrounded by braces:
# "opt1='value1' opt2='value2' ..."
#
# Option values can be:
# interface:    interface network name
# ipsrange:     a range of ips in a CIDR format
# ipsexclude:   list of ips separate by semicolon to exclude from scan
# macsexclude:  list of mac adresses separate by semicolon to exclude from scan
# filelog:      file where logs are sent
# url:          URL of API to record data
#
# Example:
# netscan "interface='wlan0' ipsrange='192.168.0.1/24' ipsexclude='192.168.0.1,192.168.0.100,192.168.0.101,192.168.0.102' url='https://example.org/record.php' filelog='/var/log/netscan/netscan.log'"
#
# default options:
# see belows in DATA section


#########  FUNCTION

_log() {
	_log_debug "$*"
	[ "${*/#error}" != "${*}" ] && echo "$(date +%Y%m%d-%T) "$* >> "$filelogerr"
	echo "$(date +%Y%m%d-%T) "$* >> "$filelog"
	return 0
}

_log_debug() {
	[ "$debug" ] && echo -e "$*" >> "$filedebug"
	return 0
}

# 1 list of commands to find
_init_cmd() {
	cmd_miss=
	for cmd in ${1}; do
		cmd_path=`whereis -b ${cmd} 2>/dev/null | sed -n "s|${cmd}: \([^ ]\+\).*|\1|p"`
		if [ "${cmd_path}" ]; then
			eval "cmd_${cmd//-/}=${cmd_path}"
			#_log_debug "cmd_${cmd//-/}=${cmd_path}"
		else
			cmd_miss="${cmd_miss} ${cmd}"
		fi
	done
	# exits if command is missing
	if [ "${cmd_miss}" ]; then
		_log "error - missing command(s): ${cmd_miss}"
		echo -e "the following command(s) are missing, please install it:\n${cmd_miss}"
		exit 1
	fi
}

_init() {
	eval "$*"

	# get configuration file
	file="/etc/netscan-etc"
	! [ -f "$file" ] && echo "error - unable to find file: '$file'" && exit 1
	source "$file"

	filelog_default="${filelog_default:-/var/log/netscan/$(basename $0).log}"
	filelog="${filelog:-$filelog_default}"
	filelogerr="${filelog%.log}.err"
	filedebug="${filelog%.log}.debug"

	_init_cmd "ip arp-scan nmap nbtscan jq curl"

	# for ip version >= ss190107, with -j option
	#interface_default="${interface_default:-$(${cmd_ip} -4 -j route show to default|${cmd_jq} -r '.[0].dev')}"
	interface_default="${interface_default:-$($cmd_ip -4 -o route show to default|cut -d' ' -f5|head -n1)}"
	interface="${interface:-$interface_default}"

	ipsrange=${ipsrange:-$ipsrange_default}
	if [ -z "$ipsrange" ]; then
		ipthis=`${cmd_ip} -4 -o address show dev ${interface}|sed 's|.*inet\s\([0-9\.]\+\)/.*|\1|'`
		# for ip version >= ss190107, with -j option
		#ipthis=`${cmd_ip} -4 -j address show dev ${interface}|${cmd_jq} -r '.[].addr_info[0].local|select(.!=null)'`
		ipsrange="${ipthis%.*}.0/24"
	else
		ipthis="${ipsrange%/*}"
	fi

	ipbase="${ipthis%.*}"
	ipsexclude="${ipsexclude:-$ipsexclude_default}"
	macsexclude="${macsexclude:-$macsexclude_default}"
	url="${url:-$url_default}"

	_log_debug "\n$(date +%Y%m%d-%T) ---------- scan ${scan_num}"
	_log_debug "\$*="$*
	_log_debug "interface=$interface"
	_log_debug "ipsrange=$ipsrange"
	_log_debug "ipthis=$ipthis"
	_log_debug "ipbase=$ipbase"
	_log_debug "ipsexclude=$ipsexclude"
	_log_debug "macsexclude=$macsexclude"
	#_log_debug "url=$url"
	#_log_debug "filelog=$filelog"
	#_log_debug "filelogerr=$filelogerr"
	#_log_debug "filedebug=$filedebug"

	# missing url
	[ ! "${url}" ] && echo "URL for backend are not defined - please correct this\nLook at " && exit 1

	# create logs path
	path="$(dirname $filelog)"
	! [ -d "$path" ] && mkdir -p "$path"
}

# Scan network with ARP
# 1 interface to scan
# 2 ips to scan
_scan_arp() {
	cmd="${cmd_arpscan} -I ${1} ${2}"
	_log_debug "---------- ${cmd}"

	raw=`${cmd}`
	ips=`sed -n "/^${ipbase}\.[0-9]\+/ s|^\(${ipbase}\.[0-9]\+\)\s.*|\1|p"<<<"$raw"`
	# data
	#data=`sed -n "/^${ipbase}\.[0-9]\+/ s|^\([^\s]\+\)\t\+\([^\s]\+\)\t\([^\t]\+\)$|ipv4=\"\1\" mac=\"\2\" interface=\"\3\"|p"<<<"$raw"`
	#data=`sed -n "/^${ipbase}\.[0-9]\+/ s|^\([^\s]\+\)\t\+\([^\s]\+\)\t\([^\t]\+\)$|{\"ipv4\":\"\1\",\"mac\":\"\2\",\"interface\":\"\3\"}|p"<<<"$raw"`
}

# Scan network with NMAP
# 1 interface to scan
# 2 ips to scan
# 3 ips to exclude
_scan_nmap() {
	local hostname mac interface

	cmd="${cmd_nmap} -e ${1} -sP ${2}"
	[ "${3}" ] && cmd="${cmd} --exclude ${3}"
	_log_debug "---------- ${cmd}"

	raw=`${cmd}`
	ips=`sed -n "/^Nmap scan report/ s|.*\(${ipbase}\.[0-9]\+\).*|\1|p"<<<"$raw"`
	data=`sed -n "/^Nmap scan report/ s|.*\(${ipbase}\.[0-9]\+\).*|{\"ipv4\":\"\1\"}|p"<<<"$raw"`
	while read line; do
		ip_tmp=`sed -n "/^Nmap scan report/ s|.*\(${ipbase}\.[0-9]\+\).*|\1|p"<<<"$line"`
		[ "$ip_tmp" ] && ip="$ip_tmp"

		hostname=`sed -n "s|^Nmap scan report for \([^ ]\+\) (.*|\1|p"<<<"$line"`
		[ "$hostname" ] && data=`${cmd_jq} -c "select(.ipv4 == \"${ip}\") |= . + {\"hostname\":\"${hostname}\"}"<<<"$data"`

		mac=`sed -n "s|^MAC Address: \([^ ]\+\) .*|\1|p"<<<"$line"`
		[ "$mac" ] && data=`${cmd_jq} -c "select(.ipv4 == \"${ip}\") |= . + {\"mac\":\"${mac}\"}"<<<"$data"`

		interface=`sed -n "s|^MAC Address: ${mac} (\([^()]\+\))|\1|p"<<<"$line"`
		[ "$interface" ] && data=`${cmd_jq} -c "select(.ipv4 == \"${ip}\") |= . + {\"interface\":\"${interface}\"}"<<<"$data"`
	done<<<"$raw"
}

# Reduce a list of IP addresses with another list
# 1 set of ips
# 2 ips to exclude
_reduce_ips() {
	# unify
	ips=`echo "${1}"|tr " " "\n"|sort -u`

	# reduce
	ips_reduce=`echo "${2}"|tr " " "\n"|tr "," "\n"|sort -u`
	_log_debug "---------- $FUNCNAME "${ips}" <- "${ips_reduce}
	for ip in ${ips_reduce}; do
		ips=`sed /^${ip}$/d<<<"$ips"`
	done
	ips=`sed '/^$/d'<<<"$ips"`
}

# Reduce the dataset from a mac address list
# 1 data
# 2 mac address to select data to exclude
_reduce_data() {
	data="${1}"
	macs=`echo "${2}"|tr " " "\n"|tr "," "\n"|sort -u`
	_log_debug "---------- $FUNCNAME "${macs}
	for mac in ${macs}; do
		data=`sed "/\"mac\":\"${mac^^}\"/d"<<<"$data"`
	done
}

# Add informations to data from a NBT scan
# 1 Ips to scan
# 2 data
_add_data_nbt() {
	local ip hostname
	data="$2"
	_log_debug "---------- $FUNCNAME ips="${1}

	for ip in ${1}; do
		read ip2 hostname <<<`nbtscan -e $ip`

		[ "$hostname" ] && data=`${cmd_jq} -c "select(.ipv4 == \"${ip}\") |= . + {\"hostname\":\"${hostname,,}\"}"<<<"$data"`
	done
}

# send json data to API for recording
# 1 data
_send_data_json() {
	cmd="curl -F \"data=$1\" -F \"key=$(_key_gen)\" \"$url\""
	_log "---------- ${cmd}"
	record=`curl -sF "data=${1}" -F "key=$(_key_gen)" "${url}"`
	[ -z "$record" ] && record="failed, no return from '$url'"
	_log "record> $record"
}

######### GLOBAL

# scan a network and create json data
_scan() {
	# init script
	_init "$*"

	# scan with NMAP
	_scan_nmap "${interface}" "${ipsrange}" "${ipsexclude}"
	ips_nmap="$ips"
	data_nmap="$data"
	_log_debug "ips_nmap="$ips_nmap
	_log_debug "data_nmap:\n$data_nmap"

	# scan with ARP
	_scan_arp ${interface} ${ipsrange}
	ips_arp="$ips"
	#data_arp="$data"
	_log_debug "ips_arp="$ips_arp
	#_log_debug "data_arp:\n$data_arp"

	# reduce ips: (ips_nmap U ips_arp)
	_reduce_ips "$ips_nmap $ips_arp" "$ipsexclude"
	ips_all="$ips"
	_log_debug "ips_all="${ips_all}
	# reduce ips: (ips_nmap U ips_arp) - ipsexclude - ips_nmap
	_reduce_ips "$ips_all" "$ips_nmap"
	ips_miss="$ips"
	_log_debug "ips_miss="${ips_miss}

	# exhaustive ips & data
	if [ "$ips_miss" ]; then
		_scan_nmap "${interface}" "${ips_miss}"
		_log_debug "data_nmap:\n${data}"
		[ "$data" ] && data_nmap="$data_nmap
$data"
	fi
	_log_debug "data_nmap:\n${data_nmap}"

	# add nbtscan data
	# 1 Ips to scan
	# 2 data
	_add_data_nbt "$ips_all" "$data_nmap"
	data_nbt="$data"
	_log_debug "data_nbt:\n${data_nbt}"

	# reduce data from mac address
	[ "$macsexclude" ] && _reduce_data "$data_nbt" "$macsexclude"
	data_all="$data"
	_log_debug "data_all:\n${data_all}"
}

#########  MAIN

data_global=
scan_num=1

# loop on arguments
if [ "${1}" ]; then
	while [ -n "${1}" ]; do
		_scan "${1}"
		[ "$data_all" ] && data_global="$data_global
$data_all"
		_log_debug "data_global:\n${data_global}"

		let scan_num++
		shift
	done
else
	_scan "$*"
fi

# global json
data_json=`sed '/^$/d'<<<"$data_global" | tr "\n" ","`
data_json="[${data_json%,}]"
_log_debug "data_json:\n${data_json}"

if [ "$data_json" = "[]" ]; then
	_log "error - no data to send: ${data_json}"
	exit 1
fi

# send data
_send_data_json "$data_json"
